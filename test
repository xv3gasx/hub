-- Fly UI + fly/unfly implementation (paste in executor)
if not game:IsLoaded() then game.Loaded:Wait() end
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local player = Players.LocalPlayer
assert(player, "LocalPlayer not found")

-- === fly implementation ===
local FLYING = false
local _flyConn = {}
local _flyObjects = {}

local function getRoot(char)
    if not char then return end
    return char:FindFirstChild("HumanoidRootPart") or char:FindFirstChild("Torso") or char:FindFirstChild("UpperTorso")
end

local function fly(speed)
    if FLYING then return end
    speed = tonumber(speed) or 50
    local char = player.Character or player.CharacterAdded:Wait()
    local root = getRoot(char)
    if not root then error("Character root not found") end

    FLYING = true
    local CONTROL = {F=0,B=0,L=0,R=0,Q=0,E=0}

    local bg = Instance.new("BodyGyro")
    local bv = Instance.new("BodyVelocity")
    bg.Name = "FlyBodyGyro"; bg.P = 9e4; bg.MaxTorque = Vector3.new(9e9,9e9,9e9)
    bg.CFrame = root.CFrame; bg.Parent = root
    bv.Name = "FlyBodyVelocity"; bv.MaxForce = Vector3.new(9e9,9e9,9e9)
    bv.Velocity = Vector3.new(0,0,0); bv.Parent = root
    _flyObjects.bg = bg; _flyObjects.bv = bv

    local humanoid = char:FindFirstChildOfClass("Humanoid")
    if humanoid then humanoid.PlatformStand = true end

    local function onInputBegan(input, processed)
        if processed or input.UserInputType ~= Enum.UserInputType.Keyboard then return end
        local k = input.KeyCode
        if k == Enum.KeyCode.W then CONTROL.F = speed end
        if k == Enum.KeyCode.S then CONTROL.B = speed end
        if k == Enum.KeyCode.A then CONTROL.L = -speed end
        if k == Enum.KeyCode.D then CONTROL.R = speed end
        if k == Enum.KeyCode.E then CONTROL.E = speed end
        if k == Enum.KeyCode.Q then CONTROL.Q = -speed end
    end
    local function onInputEnded(input)
        if input.UserInputType ~= Enum.UserInputType.Keyboard then return end
        local k = input.KeyCode
        if k == Enum.KeyCode.W then CONTROL.F = 0 end
        if k == Enum.KeyCode.S then CONTROL.B = 0 end
        if k == Enum.KeyCode.A then CONTROL.L = 0 end
        if k == Enum.KeyCode.D then CONTROL.R = 0 end
        if k == Enum.KeyCode.E then CONTROL.E = 0 end
        if k == Enum.KeyCode.Q then CONTROL.Q = 0 end
    end

    _flyConn.inputBegan = UserInputService.InputBegan:Connect(onInputBegan)
    _flyConn.inputEnded = UserInputService.InputEnded:Connect(onInputEnded)

    _flyConn.heartbeat = RunService.Heartbeat:Connect(function()
        if not FLYING then return end
        if not root or not root.Parent then
            -- auto cleanup
            if _G and type(_G.unfly) == "function" then pcall(_G.unfly) end
            return
        end
        local cam = workspace.CurrentCamera
        local forward = (cam and cam.CFrame.LookVector) or root.CFrame.LookVector
        local right = (cam and cam.CFrame.RightVector) or root.CFrame.RightVector
        local moveVec = (forward * (CONTROL.F - CONTROL.B)) + (right * (CONTROL.R + CONTROL.L))
        local vert = (CONTROL.E + CONTROL.Q)

        if moveVec.Magnitude > 0 then
            local tgt = moveVec.Unit * (speed * 0.6)
            bv.Velocity = Vector3.new(tgt.X, vert * (speed * 0.25), tgt.Z)
        else
            bv.Velocity = Vector3.new(0, vert * (speed * 0.25), 0)
        end

        if cam then
            bg.CFrame = CFrame.new(root.Position, root.Position + forward)
        else
            bg.CFrame = root.CFrame
        end
    end)
end

function unfly()
    if not FLYING then return end
    FLYING = false
    for k,v in pairs(_flyConn) do
        if v and typeof(v.Disconnect) == "function" then
            pcall(function() v:Disconnect() end)
        end
        _flyConn[k] = nil
    end
    pcall(function()
        if _flyObjects.bv then _flyObjects.bv:Destroy() end
        if _flyObjects.bg then _flyObjects.bg:Destroy() end
    end)
    _flyObjects = {}
    local char = player.Character
    local humanoid = char and char:FindFirstChildOfClass("Humanoid")
    if humanoid then humanoid.PlatformStand = false end
end

_G.fly = fly
_G.unfly = unfly

-- === UI ===
-- remove existing UI if present
local guiName = "FlyUI_by_Auto"
for _,v in ipairs(player:WaitForChild("PlayerGui"):GetChildren()) do
    if v.Name == guiName then v:Destroy() end
end

local screen = Instance.new("ScreenGui")
screen.Name = guiName
screen.ResetOnSpawn = false
screen.Parent = player:WaitForChild("PlayerGui")

local frame = Instance.new("Frame")
frame.Size = UDim2.fromOffset(260,140)
frame.Position = UDim2.new(0.02,0,0.25,0)
frame.BackgroundColor3 = Color3.fromRGB(30,30,30)
frame.BorderSizePixel = 0
frame.Parent = screen
frame.Active = true

-- drag
local dragging, dragOffset
local function startDrag(input)
    dragging = true
    dragOffset = input.Position - frame.AbsolutePosition
end
local function stopDrag()
    dragging = false
end
frame.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        startDrag(input)
    end
end)
frame.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        stopDrag()
    end
end)
UserInputService.InputChanged:Connect(function(input)
    if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
        frame.Position = UDim2.new(0, input.Position.X - dragOffset.X, 0, input.Position.Y - dragOffset.Y)
    end
end)

local title = Instance.new("TextLabel")
title.Size = UDim2.fromOffset(260,28)
title.Position = UDim2.new(0,0,0,0)
title.BackgroundColor3 = Color3.fromRGB(20,20,20)
title.BorderSizePixel = 0
title.Text = "Fly Controller"
title.TextColor3 = Color3.fromRGB(220,220,220)
title.TextSize = 14
title.Parent = frame

local status = Instance.new("TextLabel")
status.Size = UDim2.fromOffset(240,22)
status.Position = UDim2.new(0,10,0,32)
status.BackgroundTransparency = 1
status.Text = "Status: stopped"
status.TextColor3 = Color3.fromRGB(200,200,200)
status.TextSize = 14
status.TextXAlignment = Enum.TextXAlignment.Left
status.Parent = frame

local speedLabel = Instance.new("TextLabel")
speedLabel.Size = UDim2.fromOffset(90,20)
speedLabel.Position = UDim2.new(0,10,0,60)
speedLabel.BackgroundTransparency = 1
speedLabel.Text = "Speed:"
speedLabel.TextColor3 = Color3.fromRGB(200,200,200)
speedLabel.TextSize = 14
speedLabel.TextXAlignment = Enum.TextXAlignment.Left
speedLabel.Parent = frame

local speedBox = Instance.new("TextBox")
speedBox.Size = UDim2.fromOffset(120,24)
speedBox.Position = UDim2.new(0,70,0,58)
speedBox.ClearTextOnFocus = false
speedBox.Text = "50"
speedBox.TextColor3 = Color3.fromRGB(200,200,200)
speedBox.BackgroundColor3 = Color3.fromRGB(40,40,40)
speedBox.TextSize = 14
speedBox.Parent = frame

local decBtn = Instance.new("TextButton")
decBtn.Size = UDim2.fromOffset(30,24)
decBtn.Position = UDim2.new(0,196,0,58)
decBtn.Text = "-"
decBtn.TextSize = 18
decBtn.Parent = frame

local incBtn = Instance.new("TextButton")
incBtn.Size = UDim2.fromOffset(30,24)
incBtn.Position = UDim2.new(0,228,0,58)
incBtn.Text = "+"
incBtn.TextSize = 18
incBtn.Parent = frame

local toggleBtn = Instance.new("TextButton")
toggleBtn.Size = UDim2.fromOffset(240,36)
toggleBtn.Position = UDim2.new(0,10,0,92)
toggleBtn.Text = "Start Fly"
toggleBtn.TextSize = 16
toggleBtn.Parent = frame

local closeBtn = Instance.new("TextButton")
closeBtn.Size = UDim2.fromOffset(18,18)
closeBtn.Position = UDim2.new(1,-20,0,6)
closeBtn.Text = "X"
closeBtn.TextSize = 14
closeBtn.Parent = frame

-- styling quick
for _,v in ipairs(frame:GetChildren()) do
    if v:IsA("TextButton") or v:IsA("TextBox") or v:IsA("TextLabel") then
        v.TextColor3 = Color3.fromRGB(220,220,220)
        v.BackgroundColor3 = v.BackgroundColor3 or Color3.fromRGB(45,45,45)
        v.BorderSizePixel = 0
    end
end
title.TextColor3 = Color3.fromRGB(230,230,230)
title.BackgroundColor3 = Color3.fromRGB(18,18,18)

-- interactions
local function updateStatus()
    status.Text = "Status: " .. (FLYING and "flying" or "stopped")
    toggleBtn.Text = FLYING and "Stop Fly" or "Start Fly"
end

incBtn.MouseButton1Click:Connect(function()
    local n = tonumber(speedBox.Text) or 50
    n = math.clamp(n + 5, 1, 500)
    speedBox.Text = tostring(n)
end)
decBtn.MouseButton1Click:Connect(function()
    local n = tonumber(speedBox.Text) or 50
    n = math.clamp(n - 5, 1, 500)
    speedBox.Text = tostring(n)
end)

toggleBtn.MouseButton1Click:Connect(function()
    local sp = tonumber(speedBox.Text) or 50
    if not FLYING then
        pcall(function() fly(sp) end)
    else
        pcall(function() unfly() end)
    end
    updateStatus()
end)

closeBtn.MouseButton1Click:Connect(function()
    -- cleanup and remove GUI
    pcall(function() unfly() end)
    screen:Destroy()
end)

-- show initial status
updateStatus()
print("Fly UI created. Use the UI to start/stop flying.")