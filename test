local WindUI = loadstring(game:HttpGet("https://github.com/Footagesus/WindUI/releases/latest/download/main.lua"))()

local function Notify(title, content, icon, duration, background)
    WindUI:Notify({
        Title = title or "Notify",
        Content = content or "No content",
        Icon = icon or "check",
        Duration = duration or 5,
        Background = background or "rbxassetid://78131090774816"
    })
end


local Window = WindUI:CreateWindow({  
    Title = "Foxname - 99 NITF",  
    Author = "Dev:Cáo Mod",  
    Theme = "MonokaiPro",  
    Size = UDim2.fromOffset(660, 430),  
    Folder = "Foxname1",  
    SideBarWidth = 180,  
    ScrollBarEnabled = true,  
    Icon = "rbxassetid://78176499695852", 
    BackgroundImageTransparency = 0.6,  
    Background = "rbxassetid://0",
})  

Window:SetToggleKey(nil)

Window:EditOpenButton({  
    Title = "Open skibidi",  
    Icon = "rbxassetid://86146615808159",  
    CornerRadius = UDim.new(0, 16),  
    StrokeThickness = 2,  
    Draggable = true,  
    Color = ColorSequence.new(  
        Color3.fromRGB(0, 191, 255),  
        Color3.fromRGB(255, 105, 180)  
    ),
    Enabled = true,
})

Window:ToggleTransparency(false)
Window:SetBackgroundImage("rbxassetid://133222171266319")
BackgroundImageTransparency = 0.7

local InfoTab = Window:Tab({ Title = "Info", Icon = "info" })
local MainTab = Window:Tab({ Title = "Main", Icon = "terminal" })
local BringTab = Window:Tab({ Title = "Bring", Icon = "box" })
local TeleportTab = Window:Tab({ Title = "Teleport", Icon = "map-pin" })
local LocalPlayerTab = Window:Tab({ Title = "LocalPlayer", Icon = "user" })
local MisTab = Window:Tab({ Title = "Mis", Icon = "file-archive" })
local Tree = Window:Tab({ Title = "Tree", Icon = "tree-pine" })
local SettingsTab = Window:Tab({ Title = "Settings", Icon = "settings" })

-- ================= local and sever =================
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local RepStorage = game:GetService("ReplicatedStorage")
local UIS = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local HttpService = game:GetService("HttpService")
local ProximityPromptService = game:GetService("ProximityPromptService")

local LocalPlayer = Players.LocalPlayer
local itemsFolder = Workspace:WaitForChild("Items")
local cam = Workspace.CurrentCamera
local PromptButtonHoldBegan

-- ================= network ownership =================

if not getgenv().Network then
    getgenv().Network = {
        BaseParts = {},
        Velocity = Vector3.new(14, 14, 14),
        Connection = nil
    }

    getgenv().Network.Connection = RunService.Heartbeat:Connect(function()
        -- giữ SimulationRadius siêu xa
        pcall(function()
            sethiddenproperty(LocalPlayer, "SimulationRadius", 1e9)
        end)

        -- quét & clear nhanh từng frame, không để BaseParts phình to
        for i = #getgenv().Network.BaseParts, 1, -1 do
            local part = getgenv().Network.BaseParts[i]
            if not (part and part:IsDescendantOf(Workspace)) then
                table.remove(getgenv().Network.BaseParts, i)
            end
        end
    end)
end

-- ================= confog =================
local folderPath = "Foxnamess2"
local autoConfigFile = folderPath .. "/Auto.txt"

if not isfolder(folderPath) then makefolder(folderPath) end

local function getPath(name)
    return folderPath .. "/" .. name .. ".json"
end

function SaveConfig(name, data)
    writefile(getPath(name), HttpService:JSONEncode(data))
    writefile(autoConfigFile, HttpService:JSONEncode({
        NameFileSelected = name,
        Auto = true
    }))
end

function LoadConfig(name)
    local path = getPath(name)
    if isfile(path) then
        local success, result = pcall(function()
            return HttpService:JSONDecode(readfile(path))
        end)
        if success then return result end
    end
end

function AutoLoadConfig()
    if isfile(autoConfigFile) then
        local success, auto = pcall(function()
            return HttpService:JSONDecode(readfile(autoConfigFile))
        end)
        if success and auto.Auto and auto.NameFileSelected then
            return LoadConfig(auto.NameFileSelected)
        end
    end
end

function readAuto()
    if isfile(autoConfigFile) then
        local success, result = pcall(function()
            return HttpService:JSONDecode(readfile(autoConfigFile))
        end)
        if success then return result end
    end
    return { NameFileSelected = "Default", Auto = false }
end

function writeAuto(state)
    local current = readAuto()
    current.Auto = state
    writefile(autoConfigFile, HttpService:JSONEncode(current))
end

function ListFiles()
    local files = {}
    for _, file in ipairs(listfiles(folderPath)) do
        local name = file:match("([^/\\]+)%.json$")
        if name then
            table.insert(files, name)
        end
    end
    return files
end

local themeValues = {}
for name in pairs(WindUI:GetThemes()) do
    table.insert(themeValues, name)
end

local autoData = readAuto()
if autoData and autoData.Auto and autoData.NameFileSelected and autoData.NameFileSelected ~= "" then
    local data = LoadConfig(autoData.NameFileSelected)
    if data and data.Theme then
        WindUI:SetTheme(data.Theme)
    end
end

-- ================= Bring =================
local function bringWithoutTPOnce(selectedItems)
    if #selectedItems == 0 then return end
    local hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")

    for _, item in pairs(itemsFolder:GetChildren()) do
        for _, name in ipairs(selectedItems) do
            if item.Name == name and item:IsA("Model") then
                local targetCF
                if _G.ItemToPos == "Player" then
                    targetCF = hrp and hrp.CFrame or CFrame.new()
                elseif _G.ItemToPos == "Campfire" then
                    targetCF = CFrame.new(0,18,0)
                elseif _G.ItemToPos == "Scrapper" then
                    local Scrapper = Workspace.Map.Campground:FindFirstChild("Scrapper")
                    local ScrapperPart = Scrapper and Scrapper:FindFirstChildWhichIsA("BasePart")
                    targetCF = ScrapperPart and (ScrapperPart.CFrame + Vector3.new(0,15,0)) or CFrame.new()
                else
                    targetCF = hrp and hrp.CFrame or CFrame.new()
                end

                local partToBring = item.PrimaryPart or item:FindFirstChildWhichIsA("BasePart")
                if partToBring then
                    pcall(function() sethiddenproperty(partToBring, "NetworkOwnershipRule", Enum.NetworkOwnership.Manual) end)
                    if not table.find(getgenv().Network.BaseParts, partToBring) then
                        table.insert(getgenv().Network.BaseParts, partToBring)
                    end

                    item:PivotTo(targetCF)
                    partToBring.AssemblyLinearVelocity = Vector3.new(0, -30, 0)

                    RepStorage.RemoteEvents.RequestStartDraggingItem:FireServer(item)
                    RepStorage.RemoteEvents.StopDraggingItem:FireServer(item)

                    table.remove(getgenv().Network.BaseParts, table.find(getgenv().Network.BaseParts, partToBring))
                    pcall(function() sethiddenproperty(partToBring, "NetworkOwnershipRule", Enum.NetworkOwnership.Automatic) end)
                end
            end
        end
    end
end

local function bringWithoutTPNormal(selectedItems)
    if #selectedItems == 0 then return end
    local hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")

    for _, item in pairs(itemsFolder:GetChildren()) do
        for _, name in ipairs(selectedItems) do
            if item.Name == name and item:IsA("Model") then
                local targetCF
                if _G.ItemToPos == "Player" then
                    targetCF = hrp and hrp.CFrame or CFrame.new()
                elseif _G.ItemToPos == "Campfire" then
                    targetCF = CFrame.new(0,18,0)
                elseif _G.ItemToPos == "Scrapper" then
                    local Scrapper = Workspace.Map.Campground:FindFirstChild("Scrapper")
                    local ScrapperPart = Scrapper and Scrapper:FindFirstChildWhichIsA("BasePart")
                    targetCF = ScrapperPart and (ScrapperPart.CFrame + Vector3.new(0,15,0)) or CFrame.new()
                else
                    targetCF = hrp and hrp.CFrame or CFrame.new()
                end

                local partToBring = item.PrimaryPart or item:FindFirstChildWhichIsA("BasePart")
                if partToBring then
                    pcall(function() sethiddenproperty(partToBring, "NetworkOwnershipRule", Enum.NetworkOwnership.Manual) end)
                    if not table.find(getgenv().Network.BaseParts, partToBring) then
                        table.insert(getgenv().Network.BaseParts, partToBring)
                    end

                    item:PivotTo(targetCF)
                    partToBring.AssemblyLinearVelocity = Vector3.new(0, -30, 0)

                    RepStorage.RemoteEvents.RequestStartDraggingItem:FireServer(item)
                    RepStorage.RemoteEvents.StopDraggingItem:FireServer(item)

                    table.remove(getgenv().Network.BaseParts, table.find(getgenv().Network.BaseParts, partToBring))
                    pcall(function() sethiddenproperty(partToBring, "NetworkOwnershipRule", Enum.NetworkOwnership.Automatic) end)
                end

                task.wait(0.1)
            end
        end
    end
end

Notify("note", "turn off background in setting", "check", 10)
-- ================= Main tab =================
_G.KillAura = false
_G.KillAuraRange = 100
_G.ChopAura = false
_G.ChopAuraRange = 100
_G.ChopTreeType = "Small Tree"

local WeaponKeywords = {"axe", "katana", "Chainsaw", "Cultist King Mace", "Morningstar", "Infernal Sword", "Spear"}
for i, kw in ipairs(WeaponKeywords) do
    WeaponKeywords[i] = kw:lower()
end

local function HasWeapon()
    local Players = game:GetService("Players")
    local LocalPlayer = Players.LocalPlayer
    local Char = workspace:FindFirstChild(LocalPlayer.Name)
    if not Char then return false end

    local ToolHandle = Char:FindFirstChild("ToolHandle")
    if not ToolHandle then return false end

    local OriginalItem = ToolHandle:FindFirstChild("OriginalItem")
    if not OriginalItem then return false end

    local itemValue = OriginalItem.Value
    local itemName

    if typeof(itemValue) == "Instance" then
        itemName = itemValue.Name
    elseif typeof(itemValue) == "string" then
        itemName = itemValue
    else
        return false
    end

    local itemNameLower = itemName:lower()
    for _, keyword in ipairs(WeaponKeywords) do
        if string.find(itemNameLower, keyword) then
            return true
        end
    end

    return false
end

MainTab:Divider()
MainTab:Section({
    Title = "Kill Aura",
    TextXAlignment = "Center",
    TextSize = 17,
})
MainTab:Divider()

MainTab:Toggle({
    Title = "Kill Aura",
    Default = false,
    Callback = function(state)
        _G.KillAura = state
        if not state then return end

        local LocalPlayer = game.Players.LocalPlayer    
        local charsFolder = workspace:WaitForChild("Characters")    
        local pack = LocalPlayer:WaitForChild("Inventory")    
        local RemoteEve = game.ReplicatedStorage:WaitForChild("RemoteEvents")    

        local function Distance(pos)    
            local hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")    
            return hrp and (pos - hrp.Position).Magnitude or math.huge    
        end    

        task.spawn(function()    
            while _G.KillAura do    
                
                if not HasWeapon() then
                    task.wait(0.5)
                    continue
                end

                for _, v in ipairs(charsFolder:GetChildren()) do    
                    if v:IsA("Model") and v:FindFirstChild("HumanoidRootPart") then    
                        if v.Name:find("Lost Child")     
                        or v.Name:find("Pelt")     
                        or v.Name:find("Deer")     
                        or v.Name:find("PeltTrader") then continue end    

                        local rootchar = v:FindFirstChild("HumanoidRootPart")    
                        if rootchar then    
                            local distance = Distance(rootchar.Position)    
                            if distance <= (_G.KillAuraRange or 100) then    
                                for _, k in ipairs(pack:GetChildren()) do    
                                    if k:IsA("Model") and k:GetAttribute("WeaponDamage") then    
                                        task.spawn(function()    
                                            local hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")    
                                            if hrp then    
                                                RemoteEve.ToolDamageObject:InvokeServer(v, k, "30_"..k:GetAttribute("Owner"), hrp.CFrame)    
                                            end    
                                        end)    
                                    end    
                                end    
                            end    
                        end    
                    end    
                end    
                task.wait(0.20)    
            end    
        end)    
    end
})

MainTab:Slider({
    Title = "Kill Aura Range",
    Step = 1,
    Value = { Min = 0, Max = 1000, Default = 100 },
    Callback = function(v)
        _G.KillAuraRange = tonumber(v)
    end
})

MainTab:Section({
    Title = "Tree Aura",
    TextXAlignment = "Center",
    TextSize = 17,
})
MainTab:Divider()

local AxeKeywords = {"axe", "Chainsaw"}
for i, kw in ipairs(AxeKeywords) do
    AxeKeywords[i] = kw:lower()
end

local function HasAxe()
    local Players = game:GetService("Players")
    local LocalPlayer = Players.LocalPlayer
    local Char = workspace:FindFirstChild(LocalPlayer.Name)
    if not Char then return false end

    local ToolHandle = Char:FindFirstChild("ToolHandle")
    if not ToolHandle then return false end

    local OriginalItem = ToolHandle:FindFirstChild("OriginalItem")
    if not OriginalItem then return false end

    local itemValue = OriginalItem.Value
    local itemName

    if typeof(itemValue) == "Instance" then
        itemName = itemValue.Name
    elseif typeof(itemValue) == "string" then
        itemName = itemValue
    else
        return false
    end

    local itemNameLower = itemName:lower()
    for _, keyword in ipairs(AxeKeywords) do
        if string.find(itemNameLower, keyword) then
            return true
        end
    end

    return false
end

local function HitTree(tree, tool, cframe)
    if not (tree and tree.Parent and tool and tool.Parent) then return end
    local owner = tool:GetAttribute("Owner")
    if not owner then return end
    local args = {
        [1] = tree,
        [2] = tool,
        [3] = "28_"..owner,
        [4] = cframe
    }
    game.ReplicatedStorage.RemoteEvents.ToolDamageObject:InvokeServer(unpack(args))
end

local function ChopLoop()
    local player = game.Players.LocalPlayer
    while _G.ChopAura do
        local char = player.Character
        local hrp = char and char:FindFirstChild("HumanoidRootPart")
        if not hrp then task.wait(0.5) continue end

       
        if not HasAxe() then
            task.wait(0.5)
            continue
        end

        local treeNameFilter = (_G.ChopTreeType == "Big Tree") and "Bigtree" or "Small Tree"

        
        local foliage = workspace:FindFirstChild("Map") and workspace.Map:FindFirstChild("Foliage")
        if foliage then
            for _, tree in ipairs(foliage:GetChildren()) do
                if tree:FindFirstChild("Trunk") and tree.Name:find(treeNameFilter) then
                    local dist = (tree.Trunk.Position - hrp.Position).Magnitude
                    if dist <= _G.ChopAuraRange then
                        local inv = player:FindFirstChild("Inventory")
                        if inv then
                            for _, tool in ipairs(inv:GetChildren()) do
                                if tool and (tool.Name:find("Axe") or tool.Name:find("Chainsaw")) then
                                    task.spawn(function()
                                        HitTree(tree, tool, hrp.CFrame)
                                    end)
                                end
                            end
                        end
                    end
                end
            end
        end

        
        local landmarks = workspace:FindFirstChild("Map") and workspace.Map:FindFirstChild("Landmarks")
        if landmarks then
            for _, obj in ipairs(landmarks:GetChildren()) do
                if obj and obj.Name:find(treeNameFilter) then
                    local inv = player:FindFirstChild("Inventory")
                    if inv then
                        for _, tool in ipairs(inv:GetChildren()) do
                            if tool and (tool.Name:find("Axe") or tool.Name:find("Chainsaw")) then
                                task.spawn(function()
                                    HitTree(obj, tool, obj:GetPivot() or obj.CFrame)
                                end)
                            end
                        end
                    end
                end
            end
        end

        task.wait(0.8)
    end
end

MainTab:Slider({
    Title = "Chop Aura Range",
    Step = 1,
    Value = { Min = 0, Max = 1000, Default = 100 },
    Callback = function(v)
        _G.ChopAuraRange = tonumber(v)
    end
})

MainTab:Dropdown({
    Title = "Tree Type",
    Values = { "Small Tree", "Big Tree" },
    Value = "Small Tree",
    Callback = function(value)
        _G.ChopTreeType = value
    end
})

MainTab:Toggle({
    Title = "Tree Aura",
    Default = false,
    Callback = function(state)
        _G.ChopAura = state
        if state then
            task.spawn(ChopLoop)
        end
    end
})

-- ================= Auto Stun =================
MainTab:Divider()
MainTab:Section({
    Title = "Stun",
    TextXAlignment = "Center",
    TextSize = 20,
})
MainTab:Divider()
MainTab:Toggle({
    Title = "Auto Stun Deer",
    Default = false,
    Callback = function(state)
        _G.AutoStunDeer = state
        if not state then return end

        task.spawn(function()
            local ReplicatedStorage = game:GetService("ReplicatedStorage")
            local MonsterHitByTorch = ReplicatedStorage.RemoteEvents:WaitForChild("MonsterHitByTorch")
            local Characters = workspace:WaitForChild("Characters")

            while _G.AutoStunDeer do
                task.wait(0.1)

                local deer = Characters:FindFirstChild("Deer")
                if deer then
                    local args = { [1] = deer }
                    pcall(function()
                        MonsterHitByTorch:InvokeServer(unpack(args))
                    end)
                end
            end
        end)
    end
})

MainTab:Toggle({
    Title = "Auto Stun Owl",
    Default = false,
    Callback = function(state)
        _G.AutoStunOwl = state
        if not state then return end

        task.spawn(function()
            local ReplicatedStorage = game:GetService("ReplicatedStorage")
            local MonsterHitByTorch = ReplicatedStorage.RemoteEvents:WaitForChild("MonsterHitByTorch")
            local Characters = workspace:WaitForChild("Characters")

            while _G.AutoStunOwl do
                task.wait(0.1)

                local owl = Characters:FindFirstChild("Owl")
                if owl then
                    local args = { [1] = owl }
                    pcall(function()
                        MonsterHitByTorch:InvokeServer(unpack(args))
                    end)
                end
            end
        end)
    end
})

MainTab:Toggle({
    Title = "Auto Stun Ram",
    Default = false,
    Callback = function(state)
        _G.AutoStunRam = state
        if not state then return end

        task.spawn(function()
            local ReplicatedStorage = game:GetService("ReplicatedStorage")
            local MonsterHitByTorch = ReplicatedStorage:WaitForChild("MonsterHitByTorch")
            local Characters = workspace:WaitForChild("Characters")

            while _G.AutoStunRam do
                task.wait(0.1)

                
                local ram = nil
                for _, v in ipairs(Characters:GetChildren()) do
                    if v.Name == "Ram" then
                        ram = v
                        break
                    end
                end

                if ram then
                    local args = { ram }
                    pcall(function()
                        MonsterHitByTorch:InvokeServer(unpack(args))
                    end)
                end
            end
        end)
    end
})

-- ================= Auto eat =================
MainTab:Divider()
MainTab:Section({
    Title = "Auto Eat",
    TextXAlignment = "Center",
    TextSize = 20,
})
MainTab:Divider()

_G.TypeFoodToFill = "Carrot"
MainTab:Dropdown({
    Title = "Select Food to Fill Hunger",
    Values = { "Carrot", "Berry", "Cooked Morsel", "Cooked Steak" },
    Value = "Carrot",
    Callback = function(option)
        _G.TypeFoodToFill = option
    end
})

_HUNGER_THRESHOLD = 150
MainTab:Slider({
    Title = "Hunger Threshold",
    Step = 1,
    Value = { Min = 1, Max = 200, Default = 100 },
    Callback = function(v)
        _HUNGER_THRESHOLD = tonumber(v) 
    end
})

_G.AutoEat = false
MainTab:Toggle({
    Title = "Auto Eat",
    Default = false,
    Callback = function(state)
        _G.AutoEat = state

        task.spawn(function()
            local Players = game:GetService("Players")
            local LocalPlayer = Players.LocalPlayer
            local Workspace = game:GetService("Workspace")
            local ReplicatedStorage = game:GetService("ReplicatedStorage")
            local RunService = game:GetService("RunService")

            local hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
            local itemsFolder = Workspace:WaitForChild("Items")
            local RemoteConsume = ReplicatedStorage.RemoteEvents.RequestConsumeItem
            local RemoteDrag = ReplicatedStorage.RemoteEvents.RequestStartDraggingItem

            
            if not getgenv().Network then
                getgenv().Network = {BaseParts={}, Velocity=Vector3.new(14,14,14)}
                RunService.Heartbeat:Connect(function()
                    if hrp then
                        sethiddenproperty(LocalPlayer, "SimulationRadius", 1e9)
                    end
                    for i = #getgenv().Network.BaseParts, 1, -1 do
                        local part = getgenv().Network.BaseParts[i]
                        if not part:IsDescendantOf(Workspace) then
                            table.remove(getgenv().Network.BaseParts, i)
                        end
                    end
                end)
            end

            local function eatItem(item)
                local partToBring = item.PrimaryPart or item:FindFirstChildWhichIsA("BasePart")
                if not partToBring or not hrp then return end

                pcall(function() sethiddenproperty(partToBring,"NetworkOwnershipRule",Enum.NetworkOwnership.Manual) end)
                if not table.find(getgenv().Network.BaseParts, partToBring) then
                    table.insert(getgenv().Network.BaseParts, partToBring)
                end

                repeat
                    if item:IsDescendantOf(Workspace) then
                        partToBring.CFrame = hrp.CFrame + Vector3.new(0,3,0)
                        pcall(function() RemoteDrag:FireServer(item) end)
                        pcall(function() RemoteConsume:InvokeServer(item) end)
                    end
                    task.wait(0.05)
                until not item:IsDescendantOf(Workspace) or (game:GetService("Players").LocalPlayer:GetAttribute("Hunger") or 0) >= 200

                table.remove(getgenv().Network.BaseParts, table.find(getgenv().Network.BaseParts, partToBring))
                pcall(function() sethiddenproperty(partToBring,"NetworkOwnershipRule",Enum.NetworkOwnership.Automatic) end)
            end

            while _G.AutoEat do
                local hunger = game:GetService("Players").LocalPlayer:GetAttribute("Hunger") or 0

                if hunger <= _HUNGER_THRESHOLD then
                    
                    for _, item in pairs(itemsFolder:GetChildren()) do
                        if item.Name == _G.TypeFoodToFill and item:IsA("Model") then
                            eatItem(item)
                            break 
                        end
                    end
                elseif hunger >= (_HUNGER_THRESHOLD + 1) then 
                    task.wait(0.2) 
                end

                task.wait(0.10)
            end
        end)
    end
})

MainTab:Divider()
MainTab:Section({
    Title = "Auto Lost Child",
    TextXAlignment = "Center",
    TextSize = 17,
})
MainTab:Divider()

MainTab:Toggle({
    Title = "Auto Grab Children",
    Default = false,
    Callback = function(state)
        _G.AutoGrabChildren = state

        if state then
            task.spawn(function()
                local Players = game:GetService("Players")
                local ReplicatedStorage = game:GetService("ReplicatedStorage")
                local Workspace = game:GetService("Workspace")
                local LocalPlayer = Players.LocalPlayer
                local teleportOffset = Vector3.new(0,3,0)

                local sack = LocalPlayer:WaitForChild("Inventory"):WaitForChild("Old Sack")
                local RemoteStore = ReplicatedStorage:WaitForChild("RemoteEvents"):WaitForChild("RequestBagStoreItem")

                while _G.AutoGrabChildren do
                    local char = LocalPlayer.Character
                    if not char or not char:FindFirstChild("HumanoidRootPart") then break end
                    local hrp = char.HumanoidRootPart
                    local originalCFrame = hrp.CFrame

                    for _, child in ipairs(Workspace.Characters:GetChildren()) do
                        if child:IsA("Model") and child:GetAttribute("Lost") == true and child.PrimaryPart then
                            hrp.CFrame = child.PrimaryPart.CFrame + teleportOffset
                            task.wait(0.1)

                            local success, _ = pcall(function()
                                RemoteStore:InvokeServer(sack, child)
                            end)

                            if success then
                                Notify("Grabbed Lost Child", child.Name, "check", 2)
                            end

                            hrp.CFrame = originalCFrame
                            task.wait(0.5)
                        end
                    end
                    task.wait(0.5)
                end
            end)
        end
    end
})

MainTab:Divider()
MainTab:Section({
    Title = "Godmode",
    TextXAlignment = "Center",
    TextSize = 17,
})
MainTab:Divider()
MainTab:Button({
    Title = "Godmode",
    Callback = function()
        local args = {
            [1] = -math.huge
        }
        game:GetService("ReplicatedStorage").RemoteEvents.DamagePlayer:FireServer(unpack(args))
        Notify("Done", "Godmode activated ", "check", 5)
    end
})

-- ================= Auto cook =================
MainTab:Divider()
MainTab:Section({
    Title = "Auto Cook",
    TextXAlignment = "Center",
    TextSize = 20,
})
MainTab:Divider()

local AutoFoodItems = {"Steak", "Morsel"}
local alreadyBroughtFood = {}

MainTab:Toggle({
    Title = "Auto Cook",
    Default = false,
    Callback = function(state)
        _G.AutoFood = state
        if not state then
            alreadyBroughtFood = {}
            return
        end

        task.spawn(function()
            while _G.AutoFood do
                local count = 0
                for _, item in ipairs(itemsFolder:GetChildren()) do
                    if not _G.AutoFood then break end
                    if count >= 5 then break end

                    if table.find(AutoFoodItems, item.Name) and item:IsA("Model") and not table.find(alreadyBroughtFood, item) then
                        local part = item.PrimaryPart or item:FindFirstChildWhichIsA("BasePart")
                        if part then
                            count = count + 1

                            -- ownership
                            pcall(function() sethiddenproperty(part,"NetworkOwnershipRule",Enum.NetworkOwnership.Manual) end)
                            getgenv().Network = getgenv().Network or {BaseParts={},Velocity=Vector3.new(14,14,14)}
                            if not table.find(getgenv().Network.BaseParts, part) then
                                table.insert(getgenv().Network.BaseParts, part)
                            end

                            -- bring lên
                            part.CFrame = CFrame.new(0,18,0)
                            part.AssemblyLinearVelocity = Vector3.new(0, -30, 0)

                            RepStorage.RemoteEvents.RequestStartDraggingItem:FireServer(item)
                            RepStorage.RemoteEvents.StopDraggingItem:FireServer(item)

                            table.insert(alreadyBroughtFood, item)

                            -- trả ownership
                            local idx = table.find(getgenv().Network.BaseParts, part)
                            if idx then table.remove(getgenv().Network.BaseParts, idx) end
                            pcall(function() sethiddenproperty(part,"NetworkOwnershipRule",Enum.NetworkOwnership.Automatic) end)
                        end
                    end
                end
                task.wait(0.3)
            end
        end)
    end
})

-- ================= Auto Scrapper =================
MainTab:Divider()
MainTab:Section({
    Title = "Auto Scrapper",
    TextXAlignment = "Center",
    TextSize = 20,
})
MainTab:Divider()

local AllScrapperItems = {
    "Log","Sheet Metal","Bolt","Metal Chair","Broken Microwave",
    "Old Car Engine","Old Radio","WashingMachine","Cultist Gem","Tyre",
    "UFO Junk","UFO Component","Broken Fan","Chair"
}

local defaultSelected = {}
for _, item in ipairs(AllScrapperItems) do
    if item ~= "Log" then
        table.insert(defaultSelected, item)
    end
end

getgenv().AutoScrapperItems = defaultSelected
local alreadyBroughtScrapper = {}

MainTab:Dropdown({
    Title = "Select Scrapper Items",
    Values = AllScrapperItems,
    Multi = true,
    AllowNone = true,
    Value = defaultSelected,
    Callback = function(selected)
        getgenv().AutoScrapperItems = selected
    end
})

MainTab:Toggle({
    Title = "Auto Scrapper",
    Default = false,
    Callback = function(state)
        _G.AutoScrapper = state
        if not state then
            alreadyBroughtScrapper = {}
            return
        end

        task.spawn(function()
            while _G.AutoScrapper do
                local count = 0
                for _, item in ipairs(itemsFolder:GetChildren()) do
                    if not _G.AutoScrapper then break end
                    if count >= 5 then break end

                    if table.find(getgenv().AutoScrapperItems, item.Name) 
                        and item:IsA("Model") 
                        and not table.find(alreadyBroughtScrapper, item) then

                        local part = item.PrimaryPart or item:FindFirstChildWhichIsA("BasePart")
                        if part then
                            count = count + 1

                            -- ownership
                            pcall(function() sethiddenproperty(part,"NetworkOwnershipRule",Enum.NetworkOwnership.Manual) end)
                            getgenv().Network = getgenv().Network or {BaseParts={},Velocity=Vector3.new(14,14,14)}
                            if not table.find(getgenv().Network.BaseParts, part) then
                                table.insert(getgenv().Network.BaseParts, part)
                            end

                            local Scrapper = Workspace.Map.Campground:FindFirstChild("Scrapper")
                            local ScrapperPart = Scrapper and Scrapper:FindFirstChildWhichIsA("BasePart")
                            if ScrapperPart then
                                item:PivotTo(ScrapperPart.CFrame * CFrame.new(0, 15, 0))
                                part.AssemblyLinearVelocity = Vector3.new(0, -30, 0)

                                RepStorage.RemoteEvents.RequestStartDraggingItem:FireServer(item)
                                RepStorage.RemoteEvents.StopDraggingItem:FireServer(item)

                                table.insert(alreadyBroughtScrapper, item)
                            end

                            -- trả ownership ngay sau khi xử lý
                            local idx = table.find(getgenv().Network.BaseParts, part)
                            if idx then table.remove(getgenv().Network.BaseParts, idx) end
                            pcall(function() sethiddenproperty(part,"NetworkOwnershipRule",Enum.NetworkOwnership.Automatic) end)
                        end
                    end
                end
                task.wait(0.3)
            end
        end)
    end
})
-- ================= Auto Fual =================
local AllFuelItems = {"Coal", "Oil Barrel", "Fuel Canister", "Log"}  
local defaultSelectedFuel = {}
for _, item in ipairs(AllFuelItems) do
    table.insert(defaultSelectedFuel, item)
end

getgenv().AutoFuelItems = defaultSelectedFuel
local alreadyBroughtFuel = {}   

MainTab:Divider()  
MainTab:Section({  
    Title = "Auto Fuel",  
    TextXAlignment = "Center",  
    TextSize = 20,  
})  
MainTab:Divider()  

MainTab:Dropdown({  
    Title = "Select Fuel Items",  
    Values = AllFuelItems,  
    Multi = true,  
    AllowNone = true,  
    Value = defaultSelectedFuel,  
    Callback = function(selected)  
        getgenv().AutoFuelItems = selected  
    end  
})  

MainTab:Toggle({  
    Title = "Auto Fuel",  
    Default = false,  
    Callback = function(state)  
        _G.AutoFuel = state  

        if not state then  
            alreadyBroughtFuel = {}  
            return  
        end  

        task.spawn(function()  
            while _G.AutoFuel do  
                local count = 0
                for _, item in ipairs(itemsFolder:GetChildren()) do
                    if not _G.AutoFuel then break end
                    if count >= 5 then break end

                    if table.find(getgenv().AutoFuelItems, item.Name) 
                        and item:IsA("Model") 
                        and not table.find(alreadyBroughtFuel, item) then

                        local part = item.PrimaryPart or item:FindFirstChildWhichIsA("BasePart")
                        if part then
                            count = count + 1

                            -- ownership
                            pcall(function() sethiddenproperty(part,"NetworkOwnershipRule",Enum.NetworkOwnership.Manual) end)
                            getgenv().Network = getgenv().Network or {BaseParts={},Velocity=Vector3.new(14,14,14)}
                            if not table.find(getgenv().Network.BaseParts, part) then
                                table.insert(getgenv().Network.BaseParts, part)
                            end

                            part.CFrame = CFrame.new(0,18,0)
                            part.AssemblyLinearVelocity = Vector3.new(0, -30, 0)

                            RepStorage.RemoteEvents.RequestStartDraggingItem:FireServer(item)
                            RepStorage.RemoteEvents.StopDraggingItem:FireServer(item)

                            table.insert(alreadyBroughtFuel, item)

                            -- trả ownership ngay sau khi xử lý
                            local idx = table.find(getgenv().Network.BaseParts, part)
                            if idx then table.remove(getgenv().Network.BaseParts, idx) end
                            pcall(function() sethiddenproperty(part,"NetworkOwnershipRule",Enum.NetworkOwnership.Automatic) end)
                        end
                    end
                end

                task.wait(0.3)
            end
        end)
    end  
})

MainTab:Divider()
MainTab:Section({
    Title = "Auto Sacrifice",
    TextXAlignment = "Center",
    TextSize = 20,
})
MainTab:Divider()

local SacrificeItems = {"Cultist","Crossbow Cultist","Hologram Emitter"}

MainTab:Toggle({
    Title = "Auto Sacrifice",
    Default = false,
    Callback = function(state)
        _G.AutoSacrifice = state
        if not state then return end

        task.spawn(function()
            while _G.AutoSacrifice do
                local volcano = workspace:WaitForChild("Map"):WaitForChild("Landmarks"):WaitForChild("Volcano")
                local functional = volcano:WaitForChild("Functional")
                local ground = functional:WaitForChild("Ground")

                for _, item in pairs(itemsFolder:GetChildren()) do
                    for _, name in ipairs(SacrificeItems) do
                        if item.Name == name and item:IsA("Model") then
                            local part = item.PrimaryPart or item:FindFirstChildWhichIsA("BasePart")
                            if part then
                                
                                pcall(function()
                                    sethiddenproperty(part,"NetworkOwnershipRule",Enum.NetworkOwnership.Manual)
                                end)
                                getgenv().Network = getgenv().Network or {BaseParts={},Velocity=Vector3.new(14,14,14)}
                                if not table.find(getgenv().Network.BaseParts, part) then
                                    table.insert(getgenv().Network.BaseParts, part)
                                end

                                
                                item:PivotTo(ground.CFrame * CFrame.new(0,20,0))

                                
                                task.wait(0.1)
                                RepStorage.RemoteEvents.RequestStartDraggingItem:FireServer(item)
                                task.wait(0.1)
                                RepStorage.RemoteEvents.StopDraggingItem:FireServer(item)

                                
                                table.remove(getgenv().Network.BaseParts, table.find(getgenv().Network.BaseParts, part))
                                pcall(function()
                                    sethiddenproperty(part,"NetworkOwnershipRule",Enum.NetworkOwnership.Automatic)
                                end)
                            end
                        end
                    end
                end
                task.wait(0.8)
            end
        end)
    end
})

MainTab:Divider()
MainTab:Section({
    Title = "Fishing",
    TextXAlignment = "Center",
    TextSize = 20,
})
MainTab:Divider()

MainTab:Toggle({
    Title = "100% Catch fish",
    Default = false,
    Callback = function(state)
        _G.AutoCatchFishing = state
        if not state then return end

        local Players = game:GetService("Players")
        local VirtualInputManager = game:GetService("VirtualInputManager")

        local LocalPlayer = Players.LocalPlayer
        local PlayerGui = LocalPlayer:WaitForChild("PlayerGui", 9e9)
        local interface = PlayerGui:WaitForChild("Interface", 9e9)
        local fishingFrame = interface:WaitForChild("FishingCatchFrame", 9e9)
        local timingBar = fishingFrame:WaitForChild("TimingBar", 9e9)
        local successArea = timingBar:WaitForChild("SuccessArea", 9e9)

        local catchTask
        local function clickSuccessArea()
            local posX = successArea.AbsolutePosition.X + successArea.AbsoluteSize.X / 2
            local posY = successArea.AbsolutePosition.Y + successArea.AbsoluteSize.Y / 2
            VirtualInputManager:SendMouseButtonEvent(posX, posY, 0, true, game, 0)
            task.wait(0.05)
            VirtualInputManager:SendMouseButtonEvent(posX, posY, 0, false, game, 0)
        end

        local conn
        conn = fishingFrame:GetPropertyChangedSignal("Visible"):Connect(function()
            if not _G.AutoCatchFishing then
                if conn then conn:Disconnect() end
                return
            end

            if fishingFrame.Visible then
                successArea.Size = UDim2.new(1, 0, 1, 0)
                successArea.Position = UDim2.new(0, 0, 0, 0)

                catchTask = task.spawn(function()
                    while fishingFrame.Visible and _G.AutoCatchFishing do
                        clickSuccessArea()
                        task.wait(0.02)
                    end
                end)
            end
        end)
    end
})

-- ================= Bring tab =================
BringTab:Divider()
getgenv().TypeSelect = {      
    ["Resources"] = {"Log","Chair","Sapling","Diamond","Cultist","Crossbow Cultist","Alien","Hologram Emitter"},      
    ["Food"] = {"Morsel","Cooked Morsel","Steak","Cooked Steak","Berry","Carrot","Cake","Chilli","Stew","Meat? Sandwich"},      
    ["Fuel"] = {"Coal","Oil Barrel","Fuel Canister"},      
    ["Mental"] = {"Broken Fan","Sheet Metal","Bolt","Metal Chair","Broken Microwave","Old Car Engine","Old Radio","WashingMachine","Cultist Gem","Tyre","Gem of the Forest Fragment","UFO Junk","UFO Component"},      
    ["Tool"] = {"Old Flashlight","Strong Flashlight","Good Axe","Strong Axe","Chainsaw","Good Sack","Giant Sack","Kunai","Morningstar","Wildfire","Infernal Sack","Defense Blueprint","Bear Trap Blueprint","Lava Mine Blueprint","MedKit","Bandage"},   
    ["Gun"] = {"Revolver","Revolver Ammo","Rifle","Rifle Ammo","Tactical Shotgun","Raygun","Laser Canon","Crossbow","Infernal Crossbow","Leather Body","Iron Body","Alien Amour"},      
    ["Other"] = {"Meteor Shard","Gold Shard","Raw Obsidiron Ore","Scalding Obsidiron Ingot","Obsidiron Ingot","Anvil Front","Anvil Base","Anvil Back","Sacrifice Totem","Rabbit Foot","Wolf Pelt","Alpha Wolf Pelt","Bear Pelt","Wolf Corpse","Alpha Wolf Corpse","Bear Corpse"}      
}    

_G.ItemToPos = "Player"
PositionItem = BringTab:Dropdown({
    Title = "Chosen Position To Drop Item",
    Values = { "Player", "Campfire", "Scrapper" },
    Value = "Player",
    Callback = function(option) _G.ItemToPos = option end
})

_G.BringMethod = "Bring Without TP"
BringMethodItem = BringTab:Dropdown({
    Title = "Bring Method",
    Values = {"Bring Without TP", "Error"},
    Value = _G.BringMethod,
    Callback = function(opt) _G.BringMethod = opt end
})

_G.BringWithoutTPMode = "Normal"

BringTab:Dropdown({
    Title = "Bring Without TP Mode",
    Values = {"Normal", "Fast"},
    Value = _G.BringWithoutTPMode,
    Callback = function(opt)
        _G.BringWithoutTPMode = opt
    end
})

BringTab:Divider()

local FreeCamActive, OriginalCameraType, OriginalCameraCF = false, nil, nil
local rotating, sens = false, 0.2

local function enableFreeCam()
    if FreeCamActive then return end
    FreeCamActive = true
    OriginalCameraType, OriginalCameraCF = cam.CameraType, cam.CFrame
    cam.CameraType = Enum.CameraType.Scriptable

    local function renderStepped()
        if not FreeCamActive then return end
        if rotating then
            local delta = UIS:GetMouseDelta()
            local cf = cam.CFrame
            local yAngle = cf:ToEulerAnglesYXZ()
            local newAmount = math.deg(yAngle) + delta.Y
            if newAmount > 65 or newAmount < -65 then
                if not (yAngle<0 and delta.Y<0) and not (yAngle>0 and delta.Y>0) then
                    delta = Vector2.new(delta.X,0)
                end
            end
            cf *= CFrame.Angles(-math.rad(delta.Y),0,0)
            cf = CFrame.Angles(0,-math.rad(delta.X),0) * (cf - cf.Position) + cf.Position
            cf = CFrame.lookAt(cf.Position, cf.Position + cf.LookVector)
            if delta ~= Vector2.new(0,0) then cam.CFrame = cam.CFrame:Lerp(cf,sens) end
            UIS.MouseBehavior = Enum.MouseBehavior.LockCurrentPosition
        else
            UIS.MouseBehavior = Enum.MouseBehavior.Default
        end
    end

    RS.RenderStepped:Connect(renderStepped)
    UIS.InputBegan:Connect(function(Input)
        if Input.UserInputType == Enum.UserInputType.MouseButton2 or
           (Input.UserInputType == Enum.UserInputType.Touch and UIS:GetMouseLocation().X > cam.ViewportSize.X/2) then
            rotating = true
        end
    end)
    UIS.InputEnded:Connect(function(Input)
        if Input.UserInputType == Enum.UserInputType.MouseButton2 or
           (Input.UserInputType == Enum.UserInputType.Touch and UIS:GetMouseLocation().X > cam.ViewportSize.X/2) then
            rotating = false
        end
    end)
end

local function disableFreeCam()
    if not FreeCamActive then return end
    cam.CameraType = OriginalCameraType or Enum.CameraType.Custom
    cam.CFrame = OriginalCameraCF or cam.CFrame
    FreeCamActive = false
end

local function tpTo(cf)
    if not cf then return end
    local hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    if hrp then hrp.CFrame = cf + Vector3.new(0,5,0) end
end

local function bringSingleItem(item, targetCF)
    if not (item and item.PrimaryPart) then return end
    local hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    if not hrp then return end

    if _G.BringMethod == "Bring TP" then
        tpTo(item.PrimaryPart.CFrame)
        task.wait(0.2)
        RepStorage.RemoteEvents.RequestStartDraggingItem:FireServer(item)
        task.wait(0.2)
        item:SetPrimaryPartCFrame(targetCF)
        task.wait(0.2)
        tpTo(item.PrimaryPart.CFrame)
        task.wait(0.2)
        RepStorage.RemoteEvents.StopDraggingItem:FireServer(item)
        task.wait(0.3)
    else
        
        local partToBring = item.PrimaryPart or item:FindFirstChildWhichIsA("BasePart")
        if not partToBring then return end
        pcall(function() sethiddenproperty(partToBring,"NetworkOwnershipRule",Enum.NetworkOwnership.Manual) end)
        getgenv().Network = getgenv().Network or {BaseParts={},Velocity=Vector3.new(14,14,14)}
        if not table.find(getgenv().Network.BaseParts, partToBring) then table.insert(getgenv().Network.BaseParts, partToBring) end
        partToBring.CFrame = targetCF
        table.remove(getgenv().Network.BaseParts, table.find(getgenv().Network.BaseParts, partToBring))
        pcall(function() sethiddenproperty(partToBring,"NetworkOwnershipRule",Enum.NetworkOwnership.Automatic) end)
    end
end


local function bringTPLoop(selectedItems)
    if #selectedItems == 0 then
        Notify("No item", "There are no items to bring.", "check", 1)
        return
    end

    local hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    local startPos = hrp and hrp.CFrame

    local gui = Instance.new("ScreenGui")
    gui.Name = "StopBringGui"
    gui.ResetOnSpawn = false
    gui.Parent = game:GetService("CoreGui")

    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0,220,0,60)
    frame.Position = UDim2.new(0.5,-110,0,50)
    frame.BackgroundColor3 = Color3.fromRGB(25,25,25)
    frame.BorderSizePixel = 0
    frame.AnchorPoint = Vector2.new(0.5,0)
    frame.Parent = gui

    local stopBtn = Instance.new("TextButton")
    stopBtn.Size = UDim2.new(1,-10,1,-10)
    stopBtn.Position = UDim2.new(0,5,0,5)
    stopBtn.BackgroundColor3 = Color3.fromRGB(255,60,60)
    stopBtn.TextColor3 = Color3.fromRGB(255,255,255)
    stopBtn.Font = Enum.Font.GothamBold
    stopBtn.TextSize = 20
    stopBtn.Text = "STOP BRING"
    stopBtn.AutoButtonColor = true
    stopBtn.Parent = frame

    local stopFlag = false
    stopBtn.MouseButton1Click:Connect(function()
        stopFlag = true
        gui:Destroy()
    end)

    enableFreeCam()

    local broughtItems = {}

    task.spawn(function()
        repeat
            local anyItemLeft = false

            for _, item in pairs(itemsFolder:GetChildren()) do
                if stopFlag then break end
                for _, name in ipairs(selectedItems) do
                    if item.Name == name and item:IsA("Model") and not table.find(broughtItems, item) then
                        anyItemLeft = true
                        table.insert(broughtItems, item)

                        
                        local targetCF
                        if _G.ItemToPos == "Player" then
                            hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                            targetCF = hrp and hrp.CFrame or CFrame.new()
                        elseif _G.ItemToPos == "Campfire" then
                            targetCF = CFrame.new(0,18,0)
                        elseif _G.ItemToPos == "Scrapper" then
                            local Scrapper = Workspace.Map.Campground:FindFirstChild("Scrapper")
                            local ScrapperPart = Scrapper and Scrapper:FindFirstChildWhichIsA("BasePart")
                            targetCF = ScrapperPart and (ScrapperPart.CFrame + Vector3.new(0,15,0)) or CFrame.new()
                        else
                            targetCF = hrp and hrp.CFrame or CFrame.new()
                        end

                        bringSingleItem(item, targetCF)
                    end
                end
            end

            if not anyItemLeft then
                Notify("Done", "All item have bring", "check", 5)
                stopFlag = true
            end

            task.wait(0.2)
        until stopFlag

        disableFreeCam()
        if hrp and startPos then tpTo(startPos) end
        if gui and gui.Parent then gui:Destroy() end
    end)
end

local TypeOrder = {"Fuel","Resources","Mental","Food","Tool","Gun","Other"}

for _, cat in ipairs(TypeOrder) do
    local list = getgenv().TypeSelect[cat]
    BringTab:Divider()
    BringTab:Section({
        Title = cat.." Section",
        TextXAlignment = "Center",
        TextSize = 17,
    })
    BringTab:Divider()

    local selected = {}
    BringTab:Dropdown({
        Title = "Select "..cat,
        Values = list,
        Value = {},
        Multi = true,
        AllowNone = true,
        Callback = function(Value)
            selected = Value
        end
    })

    BringTab:Button({
    Title = "Bring "..cat,
    Desc = "Bring selected items for "..cat,
    Callback = function()
        if _G.BringMethod == "Bring TP" then
            bringTPLoop(selected)
        else
            if _G.BringWithoutTPMode == "Fast" then
                bringWithoutTPOnce(selected)
            else
                bringWithoutTPNormal(selected)
            end
        end
    end
})
end

TeleportTab:Button({
    Title = "Teleport Campfire",
    Locked = false,
    Callback = function()
        local plr = game:GetService("Players").LocalPlayer
        if plr and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
            plr.Character:PivotTo(CFrame.new(0, 9, 0))
        end
    end
})

TeleportTab:Button({
    Title = "Tp to Fish",
    Locked = false,
    Callback = function()
        local plr = game.Players.LocalPlayer
        local hrp = plr.Character and plr.Character:FindFirstChild("HumanoidRootPart")
        local hut = workspace:FindFirstChild("Map") 
            and workspace.Map:FindFirstChild("Landmarks") 
            and workspace.Map.Landmarks:FindFirstChild("Fishing Hut")

        if hrp and hut then
            hrp.CFrame = hut:GetPivot().Position and CFrame.new(hut:GetPivot().Position) or hut.CFrame
        elseif not hut then
            Notify("No Fishing Hut", "Please expand map", "warning", 2)
        end
    end
})

TeleportTab:Button({
    Title = "Teleport Sacrifice",
    Locked = false,
    Callback = function()
        local plr = game.Players.LocalPlayer
        local hrp = plr.Character and plr.Character:FindFirstChild("HumanoidRootPart")

        local map = workspace:FindFirstChild("Map")
        if not map then
            return Notify("No Sacrifice", "Map not found", "warning", 2)
        end

        local landmarks = map:FindFirstChild("Landmarks")
        if not landmarks then
            return Notify("No Sacrifice", "Landmarks not found", "warning", 2)
        end

        local volcano = landmarks:FindFirstChild("Volcano")
        if not volcano then
            return Notify("No Sacrifice", "Volcano not found", "warning", 2)
        end

        local functional = volcano:FindFirstChild("Functional")
        if not functional then
            return Notify("No Sacrifice", "Functional not found", "warning", 2)
        end

        local sacModel = functional:FindFirstChild("Sacrifice")
        if not sacModel then
            return Notify("No Sacrifice", "Sacrifice not found", "warning", 2)
        end

        if hrp then
            local sacPart
            if sacModel:IsA("BasePart") then
                sacPart = sacModel
            elseif sacModel:IsA("Model") then
                sacPart = sacModel.PrimaryPart or sacModel:FindFirstChildWhichIsA("BasePart")
            end

            if sacPart then
                hrp.CFrame = sacPart.CFrame + Vector3.new(0, 5, 0) -- nhảy lên 5 studs cho chắc
            else
                Notify("No Sacrifice", "Cannot find part inside Sacrifice model", "warning", 2)
            end
        end
    end
})

-- ================= Tree tab =================
--inf tree method 
local function getNil(name, class)
    for _, v in pairs(getnilinstances()) do
        if v.Name == name and v.ClassName == class then
            return v
        end
    end
end

Tree:Divider()
Tree:Section({
    Title = "How to use, you must have 1 saplings to be able to inf",
    TextXAlignment = "Center",
    TextSize = 20,
})
Tree:Divider()

getgenv().TreeShapes = {

    ["Square"] = function(center, size, spacing)
        local points = {}
        size, spacing = tonumber(size), tonumber(spacing)
        for x = -size, size, spacing do
            points[#points + 1] = Vector3.new(center.X + x, 0, center.Z - size)
            points[#points + 1] = Vector3.new(center.X + x, 0, center.Z + size)
        end
        for z = -size + spacing, size - spacing, spacing do
            points[#points + 1] = Vector3.new(center.X - size, 0, center.Z + z)
            points[#points + 1] = Vector3.new(center.X + size, 0, center.Z + z)
        end
        return points
    end,

    ["Circle"] = function(center, radius, spacing)
        local points = {}
        radius, spacing = tonumber(radius), tonumber(spacing)
        local total = math.floor((2 * math.pi * radius) / spacing)
        local step = (2 * math.pi) / total
        for i = 0, total - 1 do
            local a = step * i
            points[#points + 1] = Vector3.new(center.X + radius * math.cos(a), 0, center.Z + radius * math.sin(a))
        end
        return points
    end,

    ["Spiral"] = function(center, radius, spacing)
        local points, r, angle = {}, 0, 0
        radius, spacing = tonumber(radius), tonumber(spacing)
        while r < radius do
            points[#points + 1] = Vector3.new(center.X + r * math.cos(angle), 0, center.Z + r * math.sin(angle))
            angle += 0.2
            r += spacing / (2 * math.pi)
        end
        return points
    end,

    ["Triangle"] = function(center, size, spacing)
        local points = {}
        size, spacing = tonumber(size), tonumber(spacing)
        for x = -size, size, spacing do
            points[#points + 1] = Vector3.new(center.X + x, 0, center.Z + size)
        end
        for i = 0, size, spacing do
            points[#points + 1] = Vector3.new(center.X - size + i, 0, center.Z + size - i)
            points[#points + 1] = Vector3.new(center.X + size - i, 0, center.Z + size - i)
        end
        return points
    end,

    ["Diamond"] = function(center, size, spacing)
        local points = {}
        size, spacing = tonumber(size), tonumber(spacing)
        for i = -size, size, spacing do
            local r = size - math.abs(i)
            points[#points + 1] = Vector3.new(center.X + i, 0, center.Z + r)
            points[#points + 1] = Vector3.new(center.X + i, 0, center.Z - r)
        end
        return points
    end,

    ["Heart"] = function(center, size, spacing)
        local points = {}
        size, spacing = tonumber(size), tonumber(spacing)
        for t = 0, math.pi, spacing / 20 do
            local x = size * 16 * math.sin(t)^3
            local z = size * (13 * math.cos(t) - 5 * math.cos(2*t) - 2 * math.cos(3*t) - math.cos(4*t))
            points[#points + 1] = Vector3.new(center.X + x * 0.1, 0, center.Z + z * 0.1)
        end
        return points
    end,

    ["Cross"] = function(center, size, spacing)
        local points = {}
        size, spacing = tonumber(size), tonumber(spacing)
        for i = -size, size, spacing do
            points[#points + 1] = Vector3.new(center.X + i, 0, center.Z)
            points[#points + 1] = Vector3.new(center.X, 0, center.Z + i)
        end
        return points
    end,

    ["Star"] = function(center, radius, spacing)
        local points = {}
        radius, spacing = tonumber(radius), tonumber(spacing)
        local angleStep = math.pi / 5
        for i = 0, 9 do
            local r = (i % 2 == 0) and radius or radius * 0.5
            local angle = angleStep * i
            local x = center.X + r * math.cos(angle)
            local z = center.Z + r * math.sin(angle)
            points[#points + 1] = Vector3.new(x, 0, z)
        end
        return points
    end,

    ["Pentagon"] = function(center, radius, spacing)
        local points = {}
        radius, spacing = tonumber(radius), tonumber(spacing)
        local angleStep = 2 * math.pi / 5
        for i = 0, 4 do
            local angle = i * angleStep
            local x = center.X + radius * math.cos(angle)
            local z = center.Z + radius * math.sin(angle)
            points[#points + 1] = Vector3.new(x, 0, z)
        end
        return points
    end,

}

local TreeShapeDropdown = Tree:Dropdown({
    Title = "Shape",
    Values = { "Square", "Circle", "Spiral", "Triangle", "Diamond", "Heart", "Cross", "Star", "Pentagon" },
    Value = "",
    Callback = function(value) _G.Shape = value end
})

local spacingSlider = Tree:Slider({
    Title = "Spacing",
    Step = 0.1,
    Value = { Min = 0.2, Max = 10, Default = 1 },
    Callback = function(v) _G.ShapeSpacing = v end
})

local radiusSlider = Tree:Slider({
    Title = "Size",
    Step = 1,
    Value = { Min = 5, Max = 200, Default = 20 },
    Callback = function(v) _G.ShapeRadius = v end
})

local heightInput = Tree:Input({
    Title = "Height",
    Value = "4",
    InputIcon = "chevron-up",
    Type = "Input",
    Placeholder = "",
    Callback = function(v) _G.ShapeHeight = tonumber(v) or 0 end
})

local speedDropdown = Tree:Dropdown({
    Title = "Speed",
    Values = { "Instant", "Fast", "Normal", "Slow" },
    Value = "Instant",
    Callback = function(v) _G.PlantSpeed = v end
})

local posDropdown = Tree:Dropdown({
    Title = "Origin",
    Values = { "Center", "Player" },
    Value = "Center",
    Callback = function(v) _G.PositionsChosenShape = v end
})

local plantButton = Tree:Button({
    Title = "Build Plant (inf tree)",
    Callback = function()
        local sapling = getNil("Sapling","Model")

        if not sapling then
            local planted = false

            if workspace:FindFirstChild("Items") then
                for _, v in pairs(workspace.Items:GetChildren()) do
                    if v.Name == "Sapling" and v:FindFirstChild("HitBox") then
                        game.ReplicatedStorage.RemoteEvents.RequestPlantItem:InvokeServer(
                            v,
                            v.HitBox.Position
                        )
                        planted = true
                        break
                    end
                end
            end

            if not planted then
                repeat
                    task.wait(0.1)
                    if workspace:FindFirstChild("Items") then
                        for _, v in pairs(workspace.Items:GetChildren()) do
                            if v.Name == "Sapling" and v:FindFirstChild("HitBox") then
                                game.ReplicatedStorage.RemoteEvents.RequestPlantItem:InvokeServer(
                                    v,
                                    v.HitBox.Position
                                )
                                planted = true
                                break
                            end
                        end
                    end
                until planted
            end

            repeat
                task.wait(0.1)
                sapling = getNil("Sapling","Model")
            until sapling
        end

        local origin
        if _G.PositionsChosenShape == "Player" then
            local char = game.Players.LocalPlayer.Character
            if char and char:FindFirstChild("HumanoidRootPart") then
                origin = char.HumanoidRootPart.Position
            else
                origin = Vector3.zero
            end
        else
            local MainFire = workspace:WaitForChild("Map"):WaitForChild("Campground"):WaitForChild("MainFire")
            origin = MainFire:GetPivot().Position
        end

        local shapeFunc = getgenv().TreeShapes[_G.Shape]
        if not shapeFunc then return end
        local points = shapeFunc(origin, _G.ShapeRadius or 20, _G.ShapeSpacing or 1)

        for _, pos in ipairs(points) do
            task.spawn(function()
                local sap = getNil("Sapling","Model")
                if sap then
                    local p = Vector3.new(pos.X, _G.ShapeHeight or 0, pos.Z)
                    game.ReplicatedStorage.RemoteEvents.RequestPlantItem:InvokeServer(sap, p)
                end
            end)

            if _G.PlantSpeed == "Instant" then
            elseif _G.PlantSpeed == "Fast" then
                task.wait()
            elseif _G.PlantSpeed == "Normal" then
                task.wait(0.05)
            elseif _G.PlantSpeed == "Slow" then
                task.wait(0.2)
            else
                task.wait()
            end
        end
    end
})

-- ================= localplayer =================
_G.Speed = 27  
_G.SpeedT = false  
_G.JumpPower = 50  
_G.JumpPowerT = false  

LocalPlayerTab:Slider({  
    Title = "Set WalkSpeed",  
    Step = 1,  
    Value = {Min = 27, Max = 430, Default = 27},  
    Callback = function(value)  
        _G.Speed = value  
    end  
})  

LocalPlayerTab:Toggle({  
    Title = "Auto WalkSpeed",  
    Type = "Toggle",  
    Default = false,  
    Callback = function(state)  
        _G.SpeedT = state  
        while _G.SpeedT do  
            if game:GetService("Players").LocalPlayer.Character and game:GetService("Players").LocalPlayer.Character:FindFirstChild("Humanoid") then  
                game:GetService("Players").LocalPlayer.Character.Humanoid.WalkSpeed = _G.Speed  
            end  
            task.wait()  
        end  
    end  
})  

LocalPlayerTab:Slider({  
    Title = "Set JumpPower",  
    Step = 1,  
    Value = {Min = 27, Max = 320, Default = 50},  
    Callback = function(value)  
        _G.JumpPower = value  
    end  
})  

LocalPlayerTab:Toggle({  
    Title = "Auto JumpPower",  
    Type = "Toggle",  
    Default = false,  
    Callback = function(state)  
        _G.JumpPowerT = state  
        while _G.JumpPowerT do  
            if game:GetService("Players").LocalPlayer.Character and game:GetService("Players").LocalPlayer.Character:FindFirstChild("Humanoid") then  
                game:GetService("Players").LocalPlayer.Character.Humanoid.JumpPower = _G.JumpPower  
            end  
            task.wait()  
        end  
    end  
})  

local FlySS = LocalPlayerTab:Slider({  
    Title = "Set Fly Speed",  
    Step = 1,  
    Value = {Min = 30, Max = 500, Default = 100},  
    Callback = function(Value)  
        _G.SetSpeedFly = Value  
    end  
})  

_G.SetSpeedFly = 100  
local FlyToggle = LocalPlayerTab:Toggle({  
    Title = "Fly Toggle",  
    Type = "Toggle",  
    Default = false,  
    Callback = function(Value)   
        _G.FlyToggle = Value  
        if _G.FlyToggle == false then  
            if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid") and game.Players.LocalPlayer.Character.Humanoid.RootPart and game.Players.LocalPlayer.Character.HumanoidRootPart:FindFirstChild("VelocityHandler") and game.Players.LocalPlayer.Character.HumanoidRootPart:FindFirstChild("GyroHandler") then  
                game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler:Destroy()  
                game.Players.LocalPlayer.Character.HumanoidRootPart.GyroHandler:Destroy()  
                game.Players.LocalPlayer.Character.Humanoid.PlatformStand = false  
            end  
        end  
        while _G.FlyToggle do  
            if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid") and game.Players.LocalPlayer.Character.Humanoid.RootPart and game.Players.LocalPlayer.Character.HumanoidRootPart:FindFirstChild("VelocityHandler") and game.Players.LocalPlayer.Character.HumanoidRootPart:FindFirstChild("GyroHandler") then  
                game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler.MaxForce = Vector3.new(9e9,9e9,9e9)  
                game.Players.LocalPlayer.Character.HumanoidRootPart.GyroHandler.MaxTorque = Vector3.new(9e9,9e9,9e9)  
                game.Players.LocalPlayer.Character.Humanoid.PlatformStand = true  
                game.Players.LocalPlayer.Character.HumanoidRootPart.GyroHandler.CFrame = Workspace.CurrentCamera.CoordinateFrame  
                game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler.Velocity = Vector3.new()  
                local moveVec = require(game.Players.LocalPlayer.PlayerScripts:WaitForChild("PlayerModule"):WaitForChild("ControlModule")):GetMoveVector()  
                if moveVec.X ~= 0 then  
                    game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler.Velocity += game.Workspace.CurrentCamera.CFrame.RightVector * (moveVec.X * _G.SetSpeedFly)  
                end  
                if moveVec.Z ~= 0 then  
                    game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler.Velocity -= game.Workspace.CurrentCamera.CFrame.LookVector * (moveVec.Z * _G.SetSpeedFly)  
                end  
            elseif game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid") and game.Players.LocalPlayer.Character.Humanoid.RootPart then  
                if not game.Players.LocalPlayer.Character.HumanoidRootPart:FindFirstChild("VelocityHandler") then  
                    local bv = Instance.new("BodyVelocity")  
                    bv.Name = "VelocityHandler"  
                    bv.Parent = game.Players.LocalPlayer.Character.HumanoidRootPart  
                    bv.MaxForce = Vector3.new(0,0,0)  
                    bv.Velocity = Vector3.new(0,0,0)  
                end  
                if not game.Players.LocalPlayer.Character.HumanoidRootPart:FindFirstChild("GyroHandler") then  
                    local bg = Instance.new("BodyGyro")  
                    bg.Name = "GyroHandler"  
                    bg.Parent = game.Players.LocalPlayer.Character.HumanoidRootPart  
                    bg.MaxTorque = Vector3.new(0,0,0)  
                    bg.P = 1000  
                    bg.D = 50  
                end  
            end  
            task.wait()  
        end  
    end  
})  

local Noclip = LocalPlayerTab:Toggle({  
    Title = "Noclip",  
    Type = "Toggle",  
    Default = false,  
    Callback = function(state)   
        _G.NoclipCharacter = state  
        if not _G.NoclipCharacter then  
            if game.Players.LocalPlayer.Character then  
                for _, v in pairs(game.Players.LocalPlayer.Character:GetChildren()) do  
                    if v:IsA("BasePart") and v.CanCollide == false then  
                        v.CanCollide = true  
                    end  
                end  
            end  
        end  
        while _G.NoclipCharacter do  
            if game.Players.LocalPlayer.Character then  
                for _, v in pairs(game.Players.LocalPlayer.Character:GetChildren()) do  
                    if v:IsA("BasePart") and v.CanCollide == true then  
                        v.CanCollide = false  
                    end  
                end  
            end  
            task.wait()  
        end  
    end  
})

-- ================= Misc tab =================
MisTab:Divider()
MisTab:Section({
    Title = "You need TRAP to kill people",
    TextXAlignment = "Center",
    TextSize = 25,
})
MisTab:Divider()

local players = {}
for _, v in ipairs(game:GetService("Players"):GetPlayers()) do
    table.insert(players, v.Name)
end

MisTab:Dropdown({
    Title = "choose player",
    Values = players,
    Value = "None",
    Callback = function(option)
        _G.PlayersTrollChoseCharacter = option
    end
})

MisTab:Toggle({
    Title = "Kill player",
    Type = "Toggle",
    Default = false,
    Callback = function(state)
        _G.AutoTrapPlayers = state
        if not state then return end

        task.spawn(function()
            while _G.AutoTrapPlayers do
                local targetPlayer = game.Players[_G.PlayersTrollChoseCharacter]
                local targetHRP = targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart")
                if not targetHRP then task.wait(0.5) continue end

                for _, trap in ipairs(workspace:GetDescendants()) do
                    if trap.Name == "Bear Trap" and trap:IsA("Model") and trap.PrimaryPart and trap.Parent.Name == "Structures" then
                        local part = trap.PrimaryPart
                        if part then
                            
                            pcall(function() sethiddenproperty(part, "NetworkOwnershipRule", Enum.NetworkOwnership.Manual) end)
                            getgenv().Network = getgenv().Network or {BaseParts={}, Velocity=Vector3.new(14,14,14)}
                            if not table.find(getgenv().Network.BaseParts, part) then
                                table.insert(getgenv().Network.BaseParts, part)
                            end

                            
                            trap:PivotTo(targetHRP.CFrame * CFrame.new(0, 0, -1))

                            
                            task.wait(0.05)
                            game.ReplicatedStorage.RemoteEvents.RequestStartDraggingItem:FireServer(trap)
                            local prompt = trap:FindFirstChildWhichIsA("ProximityPrompt", true)
                            if prompt then fireproximityprompt(prompt) end
                            task.wait(0.05)
                            game.ReplicatedStorage.RemoteEvents.StopDraggingItem:FireServer(trap)

                            
                            table.remove(getgenv().Network.BaseParts, table.find(getgenv().Network.BaseParts, part))
                            pcall(function() sethiddenproperty(part, "NetworkOwnershipRule", Enum.NetworkOwnership.Automatic) end)
                        end
                    end
                end
                task.wait(0.1)
            end
        end)
    end
})

MisTab:Divider()
MisTab:Section({
    Title = "Others",
    TextXAlignment = "Center",
    TextSize = 17,
})
MisTab:Divider()

local AnvilItems = {
    "Anvil Base",
    "Anvil Back",
    "Anvil Front"
}

MisTab:Button({
    Title = "Bring Anvil to Workshop",
    Callback = function()
        task.spawn(function()
            local targetPart = workspace.Map.Landmarks.ToolWorkshop_MeteorShower.Functional:FindFirstChild("AnvilHologram")
            if not targetPart then
                warn("AnvilHologram chưa có, đợi một chút...")
                repeat
                    task.wait(0.5)
                    targetPart = workspace.Map.Landmarks.ToolWorkshop_MeteorShower.Functional:FindFirstChild("AnvilHologram")
                until targetPart
            end

            for _, itemName in ipairs(AnvilItems) do
                local item = workspace.Items:FindFirstChild(itemName)
                if item and item:IsA("Model") and item.PrimaryPart then
                    local part = item.PrimaryPart

                    
                    pcall(function() sethiddenproperty(part,"NetworkOwnershipRule",Enum.NetworkOwnership.Manual) end)
                    getgenv().Network = getgenv().Network or {BaseParts={},Velocity=Vector3.new(14,14,14)}
                    if not table.find(getgenv().Network.BaseParts, part) then table.insert(getgenv().Network.BaseParts, part) end

                    
                    part.CFrame = targetPart.CFrame + Vector3.new(0,20,0)

                    
                    task.wait(0.05)
                    RepStorage.RemoteEvents.RequestStartDraggingItem:FireServer(item)
                    task.wait(0.05)
                    RepStorage.RemoteEvents.StopDraggingItem:FireServer(item)

                    
                    local idx = table.find(getgenv().Network.BaseParts, part)
                    if idx then table.remove(getgenv().Network.BaseParts, idx) end
                    pcall(function() sethiddenproperty(part,"NetworkOwnershipRule",Enum.NetworkOwnership.Automatic) end)
                end
            end
        end)
    end
})

local FullBright = MisTab:Toggle({
    Title = "Full Bright",
    Type = "Toggle",
    Default = false,
    Callback = function(Value) 
        _G.FullBrightEnabled = Value
        if not _G.FullBrightEnabled then
            game:GetService("Lighting").Ambient = Color3.new(0, 0, 0)
            game:GetService("Lighting").OutdoorAmbient = Color3.new(0, 0, 0)
            game:GetService("Lighting").Brightness = 1
            game:GetService("Lighting").ClockTime = 14
            game:GetService("Lighting").FogEnd = 1000
            game:GetService("Lighting").ColorCorrection.Enabled = true
        end
        while _G.FullBrightEnabled do
            game:GetService("Lighting").Ambient = Color3.new(1, 1, 1)
            game:GetService("Lighting").OutdoorAmbient = Color3.new(1, 1, 1)
            game:GetService("Lighting").Brightness = 1
            game:GetService("Lighting").ClockTime = 14
            game:GetService("Lighting").FogEnd = 100000
            game:GetService("Lighting").ColorCorrection.Enabled = false
            task.wait()
        end
    end
})

local NoFog = MisTab:Toggle({
    Title = "No Fog",
    Type = "Toggle",
    Default = false,
    Callback = function(Value) 
        _G.NoFog = Value
        while _G.NoFog do
            for _, v in pairs(workspace:FindFirstChild("Map") 
                and workspace.Map:FindFirstChild("Boundaries") 
                and workspace.Map.Boundaries:GetChildren() or {}) do
                if not v:IsA("Model") then
                    v:Destroy()
                end
            end
            task.wait()
        end
    end
})


MisTab:Toggle({
    Title = "Instant Prompt",
    Type = "Toggle",
    Default = false,
    Callback = function(state)
        if state then
            if PromptButtonHoldBegan then
                PromptButtonHoldBegan:Disconnect()
                PromptButtonHoldBegan = nil
            end

            if fireproximityprompt then
                PromptButtonHoldBegan = ProximityPromptService.PromptButtonHoldBegan:Connect(function(prompt)
                    fireproximityprompt(prompt)
                end)
            end
        else
            if PromptButtonHoldBegan then
                PromptButtonHoldBegan:Disconnect()
                PromptButtonHoldBegan = nil
            end
        end
    end
})

_G.UnlockFullMap = false  

MisTab:Toggle({
    Title = "Unlock Full Map (Circle)",
    Default = false,
    Callback = function(state)
        _G.UnlockFullMap = state

        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
        if not hrp then
            player.CharacterAdded:Wait()
            hrp = player.Character:WaitForChild("HumanoidRootPart")
        end

        if not state then return end

        
        local mapRange = workspace:GetAttribute("MapRange")
        if mapRange ~= 1400 then
            Notify("Request Campfire Lv5!", "Reach Campfire Lv 5 Before Run Script", "triangle-alert", 4)
            _G.UnlockFullMap = false
            return
        end

        local originPos = hrp.Position
        local Y_HEIGHT = 85
        local theta = 0
        local radius = 0
        local radiusStep = 45
        local angleStep = math.rad(10)
        local speed = 0.05

        task.spawn(function()
            
            while _G.UnlockFullMap and radius <= mapRange do
                local x = radius * math.cos(theta)
                local z = radius * math.sin(theta)
                hrp.CFrame = CFrame.new(originPos.X + x, Y_HEIGHT, originPos.Z + z)

                theta = theta + angleStep
                radius = radius + radiusStep / (2*math.pi) * angleStep

                task.wait(speed)
            end

            
            local holdTime = 3
            local t0 = tick()
            while _G.UnlockFullMap and tick() - t0 < holdTime do
                hrp.CFrame = CFrame.new(originPos)
                task.wait(0.1)
            end

            _G.UnlockFullMap = false
            Notify("Done", "Unlock Full Map Complete", "check", 3)
        end)
    end
})

local Players = game:GetService("Players")
local VirtualUser = game:GetService("VirtualUser")
local player = Players.LocalPlayer
_G.AntiAFK = false
MisTab:Toggle({
    Title = "Anti AFK",
    Default = false,
    Callback = function(state)
        _G.AntiAFK = state

        
        if getgenv().AntiAFKConnection then
            getgenv().AntiAFKConnection:Disconnect()
            getgenv().AntiAFKConnection = nil
        end

        if state then
            
            local GC = getconnections or get_signal_cons
            if GC then
                for _, v in pairs(GC(player.Idled)) do
                    if v.Disable then
                        v:Disable()
                    elseif v.Disconnect then
                        v:Disconnect()
                    end
                end
            end

            
            getgenv().AntiAFKConnection = player.Idled:Connect(function()
                if not _G.AntiAFK then return end
                VirtualUser:CaptureController()
                VirtualUser:ClickButton2(Vector2.new())
            end)
        end
    end
})

local CO = {}
local ChestMap = {}
local VChest = nil

local function tableChanged(old, new)
    if #old ~= #new then return true end
    for i = 1, #old do
        if old[i] ~= new[i] then return true end
    end
    return false
end

task.spawn(function()
    while task.wait(20) do
        local newCO = {}
        local newMap = {}
        local nameCount = {}

        for _, v in pairs(workspace.Items:GetChildren()) do
            if v:IsA("Model") and v.Name:find("Chest") then
                for _, chest in pairs(v:GetDescendants()) do
                    if chest:IsA("ProximityPrompt") then
                        local baseName = v.Name
                        nameCount[baseName] = (nameCount[baseName] or 0) + 1
                        local label = baseName .. " (" .. nameCount[baseName] .. ")"
                        table.insert(newCO, label)
                        newMap[label] = v
                        break
                    end
                end
            end
        end

        table.sort(newCO)
        if tableChanged(CO, newCO) then
            CO = newCO
            ChestMap = newMap
            if VChest then
                
                VChest:Refresh(CO)
                if #CO > 0 then
                    VChest:SetValue(CO[1]) 
                else
                    VChest:SetValue("None")
                end
            end
        end
    end
end)

VChest = MisTab:Dropdown({
    Title = "Choose Chest To Teleport",
    Values = CO,
    Value = "None",
    Multi = false,
    AllowNone = true,
    Callback = function(Value)
        _G.ChestV = Value
    end
})

MisTab:Button({
	Title = "Teleport To Chest",
	Desc = "Teleport to the chosen chest",
	Callback = function()
		local char = game.Players.LocalPlayer.Character
		if not char or not _G.ChestV then return end
		local hrp = char:FindFirstChild("HumanoidRootPart")
		if not hrp then return end

		local chest = ChestMap[_G.ChestV]
		if chest then
			local pivot = chest.PrimaryPart and chest.PrimaryPart.CFrame or chest:GetPivot()
			char:PivotTo(pivot)
		end
	end
})

MisTab:Button({
    Title = "Open All Chest",
    Callback = function()
        local ChestList = {}

        
        for _, v in pairs(workspace.Items:GetChildren()) do
            if string.find(v.Name, "Chest") and v.Name ~= "Stronghold Diamond Chest" then
                for _, d in pairs(v:GetDescendants()) do
                    if d:IsA("ProximityPrompt") then
                        table.insert(ChestList, d)
                    end
                end
            end
        end

        
        for _, v in ipairs(ChestList) do
            if v and v:IsA("ProximityPrompt") and v.Enabled then
                pcall(function()
                    v.HoldDuration = 0
                    fireproximityprompt(v, 1)
                    if typeof(chestLooted) == "function" then
                        chestLooted()
                    end
                end)
                task.wait(0.05)
            end
        end
    end
})

InfoTab:Divider()
InfoTab:Section({ 
    Title = "Developer",
    TextXAlignment = "Center",
    TextSize = 17,
})
InfoTab:Divider()

local Owner = InfoTab:Paragraph({
    Title = "Cáo Mod",
    Desc = "Dex and owner script",
    Image = "rbxassetid://113523692909987",
    ImageSize = 30,
    Thumbnail = "",
    ThumbnailSize = 0,
    Locked = false,
})

InfoTab:Divider()
InfoTab:Section({ 
    Title = "Source - Most of the script is based on his script",
    TextXAlignment = "Center",
    TextSize = 17,
})
InfoTab:Divider()

local Source = InfoTab:Paragraph({
    Title = "Nova Hoang (Nguyễn Ngô Tấn Hoàng)",
    Desc = "Owner Of Article Hub and Nihahaha Hub ",
    Image = "rbxassetid://77933782593847",
    ImageSize = 30,
    Thumbnail = "",
    ThumbnailSize = 0,
    Locked = false,
})

InfoTab:Divider()
InfoTab:Section({ 
    Title = "Discord",
    TextXAlignment = "Center",
    TextSize = 17,
})
InfoTab:Divider()

local InviteCode = "mSrMzVuc3h"
local DiscordAPI = "https://discord.com/api/v10/invites/" .. InviteCode .. "?with_counts=true&with_expiration=true"

local function LoadDiscordInfo()
    local success, result = pcall(function()
        return HttpService:JSONDecode(WindUI.Creator.Request({
            Url = DiscordAPI,
            Method = "GET",
            Headers = {
                ["User-Agent"] = "RobloxBot/1.0",
                ["Accept"] = "application/json"
            }
        }).Body)
    end)

    if success and result and result.guild then
        local DiscordInfo = InfoTab:Paragraph({
            Title = result.guild.name,
            Desc = ' <font color="#52525b">•</font> Member Count : ' .. tostring(result.approximate_member_count) ..
                '\n <font color="#16a34a">•</font> Online Count : ' .. tostring(result.approximate_presence_count),
            Image = "https://cdn.discordapp.com/icons/" .. result.guild.id .. "/" .. result.guild.icon .. ".png?size=1024",
            ImageSize = 42,
        })

        InfoTab:Button({
            Title = "Update Info",
            Callback = function()
                local updated, updatedResult = pcall(function()
                    return HttpService:JSONDecode(WindUI.Creator.Request({
                        Url = DiscordAPI,
                        Method = "GET",
                    }).Body)
                end)

                if updated and updatedResult and updatedResult.guild then
                    DiscordInfo:SetDesc(
                        ' <font color="#52525b">•</font> Member Count : ' .. tostring(updatedResult.approximate_member_count) ..
                        '\n <font color="#16a34a">•</font> Online Count : ' .. tostring(updatedResult.approximate_presence_count)
                    )
                end
            end
        })

        InfoTab:Button({
            Title = "Copy Discord Invite",
            Callback = function()
                setclipboard("https://discord.gg/" .. InviteCode)
            end
        })
    else
        InfoTab:Paragraph({
            Title = "Error fetching Discord Info",
            Desc = HttpService:JSONEncode(result),
            Image = "triangle-alert",
            ImageSize = 26,
            Color = "Red",
        })
    end
end

LoadDiscordInfo()

local themeValues = {}
for name in pairs(WindUI:GetThemes()) do
    table.insert(themeValues, name)
end

local ThemeSelectDropdown = SettingsTab:Dropdown({
    Title = "Select Theme",
    Values = themeValues,
    Value = themeValues[1],
    Callback = function(option)
        _G.ThemeSelect = option
    end
})

SettingsTab:Button({
    Title = "Apply Theme",
    Locked = false,
    Callback = function()
        if _G.ThemeSelect then
            WindUI:SetTheme(_G.ThemeSelect)
        end
    end
})


SettingsTab:Divider()
SettingsTab:Section({ 
    Title = "Background Select",
    TextXAlignment = "Center",
    TextSize = 17,
})
SettingsTab:Divider()

getgenv().BVaildSelect = {
    ["No Background"] = "rbxassetid://0",
    ["Furina"] = "rbxassetid://80115246253301",
    ["Furina1"] = "rbxassetid://84672393253807",
    ["Furina2"] = "rbxassetid://133222171266319",
}

local SBA = SettingsTab:Dropdown({
    Title = "Select Background",
    Values = { "No Background", "Furina", "Furina1", "Furina2" },
    Value = "No Background",
    Callback = function(option) 
        _G.BackgroundImage = getgenv().BVaildSelect[option]
        Window:SetBackgroundImage(_G.BackgroundImage)
    end
})

SettingsTab:Divider()
SettingsTab:Section({ 
    Title = "Custom Background",
    TextXAlignment = "Center",
    TextSize = 17,
})
SettingsTab:Divider()

local CustomBackground = SettingsTab:Input({
    Title = "Background ID",
    Type = "Input",
    Placeholder = "135163165559760",
    Callback = function(input)
        if input ~= "" then
            _G.BackgroundImage = "rbxassetid://" .. input
            Window:SetBackgroundImage(_G.BackgroundImage)
        end
    end
})

local Keybind = SettingsTab:Keybind({
    Title = "Keybind off gui",
    Value = "G",
    Callback = function(v)
        Window:SetToggleKey(Enum.KeyCode[v])
    end
})

_G.ConfigName = ""
local savedFiles = ListFiles()
local auto = readAuto()
_G.ConfigName = auto.NameFileSelected

SettingsTab:Input({
	Title = "Name Config",
	Desc = "Input name to save/load config",
	Value = _G.ConfigName,
	InputIcon = "file",
	Type = "Input",
	Placeholder = "Config1",
	Callback = function(text)
		_G.ConfigName = text
	end
})

local filesDropdown = SettingsTab:Dropdown({
	Title = "Select Config File",
	Multi = false,
	AllowNone = true,
	Values = savedFiles,
	Value = _G.ConfigName ~= "" and _G.ConfigName or savedFiles[1],
	Callback = function(file)
		_G.ConfigName = file
	end
})

SettingsTab:Button({
	Title = "Save Config",
	Desc = "Save current UI config",
	Callback = function()
		if _G.ConfigName and _G.ConfigName ~= "" then
			SaveConfig(_G.ConfigName, {
				Theme = WindUI:GetCurrentTheme(),
			})
			writeAuto(readAuto().Auto)
			WindUI:Notify({
				Title = "Saved",
				Content = "Config saved as " .. _G.ConfigName,
				Duration = 2
			})
		end
	end
})

SettingsTab:Button({
	Title = "Load Config",
	Desc = "Load selected config",
	Callback = function()
		if _G.ConfigName and _G.ConfigName ~= "" then
			local data = LoadConfig(_G.ConfigName)
			if data and data.Theme then
				WindUI:SetTheme(data.Theme)
				WindUI:Notify({
					Title = "Loaded",
					Content = "Config loaded from " .. _G.ConfigName,
					Duration = 2
				})
			end
		end
	end
})

SettingsTab:Button({
	Title = "Overwrite Config",
	Desc = "Replace file with current config",
	Callback = function()
		if _G.ConfigName and _G.ConfigName ~= "" then
			SaveConfig(_G.ConfigName, {
				Theme = WindUI:GetCurrentTheme(),
			})
			WindUI:Notify({
				Title = "Overwritten",
				Content = "File " .. _G.ConfigName .. " updated",
				Duration = 2
			})
		end
	end
})

SettingsTab:Button({
	Title = "Refresh Config List",
	Callback = function()
		filesDropdown:Refresh(ListFiles())
	end
})

local AutoLoadConfigToggle = SettingsTab:Toggle({
	Title = "Auto Load Config",
	Desc = "Automatically load when script starts",
	Default = readAuto().Auto,
	Callback = function(state)
		task.wait(3)
		writeAuto(state)
	end
})
AutoLoadConfigToggle:Set(readAuto().Auto)

local autoData = readAuto()
if autoData and autoData.Auto and autoData.NameFileSelected and autoData.NameFileSelected ~= "" then
	local data = LoadConfig(autoData.NameFileSelected)
	if data and data.Theme then
		WindUI:SetTheme(data.Theme)
	end
end